#!/usr/bin/env python

import os
import sys
import numpy as np
import warnings
from astropy.io import fits
from astropy.utils.exceptions import AstropyWarning
import time
import shutil
import re
import subprocess
import glob
import logging
import socket
from argparse import ArgumentParser
import nsc

if __name__ == "__main__":

    # Combine data for one NSC healpix region
    parser = ArgumentParser(description='Combine NSC data for one healpix region.')
    parser.add_argument('pix', type=str, nargs=1, help='HEALPix pixel number')
    parser.add_argument('version', type=str, nargs=1, help='Version number')
    parser.add_argument('--nside', type=int, default=128, help='HEALPix Nside')
    parser.add_argument('-r','--redo', action='store_true', help='Redo this HEALPIX')
    parser.add_argument('-v','--verbose', action='store_true', help='Verbose output')
    parser.add_argument('-m','--multilevel', action='store_true', help='Break into smaller healpix')
    parser.add_argument('--outdir', type=str, default='', help='Output directory')
    parser.add_argument('-nm','--nmulti', type=int, nargs=1, default=1, help='Number of jobs')

    args = parser.parse_args()

    t0 = time.time()
    hostname = socket.gethostname()
    host = hostname.split('.')[0]
    radeg = np.float64(180.00) / np.pi

    # Inputs                                                                                                                                              
    pix = int(args.pix[0])
    version = args.version[0]
    verbose = args.verbose
    nside = args.nside
    redo = args.redo
    multilevel = args.multilevel
    nmulti = dln.first_el(args.nmulti)
    print('KLUDGE!!!  FORCING --MULTILEVEL')
    multilevel = True
    outdir = args.outdir

     
    # Calibrate catalogs for one exposure
    dldir,mssdir,localdir = nsc.utils.rootdirs()

    
    # Start the logfile 
    #------------------ 
    # format is delvered_forcebrick.brick.host.DATETIME.log
    host = socket.gethostname()
    hostname = host.split('.')[0]
    logtime = datetime.now().strftime("%Y%m%d%H%M%S") 
    # Set up logging to screen and logfile
    logFormatter = logging.Formatter("%(asctime)s [%(levelname)-5.5s]  %(message)s")
    logger = logging.getLogger() 
    while logger.hasHandlers(): # some existing loggers, remove them   
        logger.removeHandler(logger.handlers[0]) 
    logger = logging.getLogger()
    logtime = datetime.now().strftime("%Y%m%d%H%M%S")
    logfile = expdir+'/'+base+'_ombine.log'
    if os.path.exists(logfile): os.remove(logfile)
    fileHandler = logging.FileHandler(logfile)
    fileHandler.setFormatter(logFormatter)
    rootLogger.addHandler(fileHandler)
    consoleHandler = logging.StreamHandler()
    consoleHandler.setFormatter(logFormatter)
    logger.addHandler(consoleHandler)
    logger.setLevel(logging.NOTSET)


    nsc.combine.combine(pix,version,nside=nside,redo=args.redo,
                        verbose=args.verbose,multilevel=multilevel,
                        outdir=outdir,nmulti=args.nmulti)
