import os
import numpy as np
import sys
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import astropy.io.fits as pyfits
import astropy.utils as autils
import requests
import json
from pprint import pprint as pp  # pretty print

# Public config
natroot = 'https://astroarchive.noirlab.edu'
#!natroot = 'http://localhost:8020/'
testUserEmail = 'demo_user@mail.edu'
testUserPassword = '!Password'
testProposal = 'test-prop'
publicFileId = '0000298c7e0b3ce96b3fff51515a6100'
#proprietaryFileId = '5cb627467b1e4c28a18cd491cf09272e' # from S&F
proprietaryFileId = 'a96e55509a4cf89ebcc3126bef2e6aa7' # from S&F
proprietaryArch   = 'c4d_140725_004418_ooi_g_v1.fits.fz' # from S&F
m5url=f'{natroot}/api/retrieve/84289f753e3155b55955b7d4ffeb7c4b/?hdus=35' # for zoom

adsurl = f'{natroot}/api/adv_search'
adsurl

jj = {
    "outfields" : [
        "instrument",
        "md5sum",
        "DTNSANAM",
        "DTACQNAM",
        "PROPID",
        "RA",
        "DEC",
        "exposure",
        "FILTER",
        "DATE-OBS",
        "MJD-OBS",
        "archive_filename",
        "proc_type",
        "prod_type",
        "obs_type",
        "release_date",
        "proposal",
        "caldat",
        "EXPNUM",    # AUX field. Slows search
        "PLVER",
    ],
    "search" : [
        ["instrument", "decam"],
        ["proc_type", "instcal"],
	["caldat", "2023-01-01", "2024-12-31"],  # limit to date range
#	["caldat", "2021-01-01", "2022-12-31"],  # limit to date range	
#	["caldat", "2019-01-01", "2020-12-31"],  # limit to date range	
#	["caldat", "2017-01-01", "2018-12-31"],  # limit to date range	
#	["caldat", "2014-01-01", "2016-12-31"],  # limit to date range	
#	["caldat", "2012-01-10", "2013-12-31"],  # limit to date range	
#	["caldat", "2017-02-11", "2018-04-17"],  # limit to date range	
#        ["ra_min",322,324],
#        ["EXPNUM", 667000, 669000],
    ]
}

limit = 0 #20000
apiurl = f'{adsurl}/find/?limit='+str(limit)
print(f'Using API url: {apiurl}')

res = requests.post(apiurl,json=jj)
txt = res.json()
#res = requests.post(apiurl,json=jj).json()
#df = pd.DataFrame(requests.post(apiurl,json=jj).json()[1:])

# this gave an error saying something like
# there was more than one line per line

from astropy.table import Table,vstack
#tab = Table.from_pandas(df)

# 1st element has metadata including column names and dtype
tab = Table(txt[1:])

for c in tab.colnames: tab[c].name=c.lower()
for c in tab.colnames:
    if tab[c].dtype.base=='O':
        tab[c]=tab[c].astype(str)
#tab['filter'] = tab['filter'].astype(str)
#tab['dtnsanam'] = tab['dtnsanam'].astype(str)

from datetime import datetime
timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
tab.write('astroarchive_query_decam_2023-2024_'+timestamp+'.fits',overwrite=True)
#tab.write('astroarchive_query_decam_2021-2022_'+timestamp+'.fits',overwrite=True)
#tab.write('astroarchive_query_decam_2019-2020_'+timestamp+'.fits',overwrite=True)
#tab.write('astroarchive_query_decam_2017-2018_'+timestamp+'.fits',overwrite=True)
#tab.write('astroarchive_query_decam_2014-2016_'+timestamp+'.fits',overwrite=True)
#tab.write('astroarchive_query_decam_2012-2013_'+timestamp+'.fits',overwrite=True)
#tab.write('astroarchive_query_'+timestamp+'.fits',overwrite=True)

# URI includes the full path to the file
# archive_filename has that, so we are good.

from glob import glob
files = glob('astroarchive_query_decam_20??-20??_2024072714????.fits')
files.sort()
tab = None
for i in range(len(files)):
    print(i,files[i])
    tab1 = Table.read(files[i])
    if tab1['exposure'].dtype.char=='S':
        tab1['exposure'] = tab1['exposure'].astype(str)
        bd, = np.where(tab1['exposure']=='None')
        tab1['exposure'][bd] = 'NaN'
        tab1['exposure'] = tab1['exposure'].astype(float)
    tab1['expnum'] = tab1['expnum'].astype(int)
    if tab is None:
        tab = tab1
    else:
        tab = vstack((tab,tab1))
timestamp = datetime.now().strftime("%Y%m%d%H%M%S")	
tab.write('astroarchive_query_decam_'+timestamp+'.fits',overwrite=True)
# 3045872